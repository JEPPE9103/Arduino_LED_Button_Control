#define LED_RED 13
#define LED_GREEN 12
#define LED_BLUE 11
#define BUTTON_RED 2
#define BUTTON_GREEN 3
#define POTENTIOMETER A0

volatile bool ledRedState = false;
volatile bool ledGreenState = false;
bool potentiometerEnabled = true;
bool button1Enabled = true;
bool button2Enabled = true;

unsigned long lastDebounceTimeRed = 0;
unsigned long lastDebounceTimeGreen = 0;
unsigned long debounceDelay = 50;

enum Command {
  EnableButton1,
  DisableButton1,
  EnableButton2,
  DisableButton2,
  EnablePotentiometer,
  DisablePotentiometer,
  LedOn1,
  LedOff1,
  LedOn2,
  LedOff2,
  LedPower,
};

void processCommand(Command command, int value) {
  switch (command) {
    case EnableButton1:
      button1Enabled = true;
      break;
    case DisableButton1:
      button1Enabled = false;
      break;
    case EnableButton2:
      button2Enabled = true;
      break;
    case DisableButton2:
      button2Enabled = false;
      break;
    case EnablePotentiometer:
      potentiometerEnabled = true;
      break;
    case DisablePotentiometer:
      potentiometerEnabled = false;
      break;
    case LedOn1:
      digitalWrite(LED_RED, HIGH);
      break;
    case LedOff1:
      digitalWrite(LED_RED, LOW);
      break;
    case LedOn2:
      digitalWrite(LED_GREEN, HIGH);
      break;
    case LedOff2:
      digitalWrite(LED_GREEN, LOW);
      break;
    case LedPower:
      if (potentiometerEnabled) {
        analogWrite(LED_BLUE, value);
      }
      break;
  }
}

void handleButtonRedInterrupt() {
  if (button1Enabled && (millis() - lastDebounceTimeRed > debounceDelay)) {
    if (digitalRead(BUTTON_RED) == LOW) {
      ledRedState = !ledRedState;
      digitalWrite(LED_RED, ledRedState);
      Serial.println("Button 1 pressed"); 
    }
    lastDebounceTimeRed = millis();
  }
}

void handleButtonGreenInterrupt() {
  if (button2Enabled && (millis() - lastDebounceTimeGreen > debounceDelay)) {
    if (digitalRead(BUTTON_GREEN) == LOW) {
      ledGreenState = !ledGreenState;
      digitalWrite(LED_GREEN, ledGreenState);
      Serial.println("Button 2 pressed"); 
    }
    lastDebounceTimeGreen = millis();
  }
}

void setup() {
  pinMode(LED_RED, OUTPUT);
  pinMode(LED_GREEN, OUTPUT);
  pinMode(LED_BLUE, OUTPUT);
  pinMode(BUTTON_RED, INPUT_PULLUP);
  pinMode(BUTTON_GREEN, INPUT_PULLUP);
  pinMode(POTENTIOMETER, INPUT);

  attachInterrupt(digitalPinToInterrupt(BUTTON_RED), handleButtonRedInterrupt, FALLING);
  attachInterrupt(digitalPinToInterrupt(BUTTON_GREEN), handleButtonGreenInterrupt, FALLING);

  Serial.begin(9600);
}

void loop() {
  Command command;
  int value;
  if (Serial.available() > 0) {
    String commandString = Serial.readStringUntil('\n');
    if (commandString == "enable button1") {
      command = EnableButton1;
    } else if (commandString == "disable button1") {
      command = DisableButton1;
    } else if (commandString == "enable button2") {
      command = EnableButton2;
    } else if (commandString == "disable button2") {
      command = DisableButton2;
    } else if (commandString == "ledon1") {
      command = LedOn1;
    } else if (commandString == "ledoff1") {
      command = LedOff1;
    } else if (commandString == "ledon2") {
      command = LedOn2;
    } else if (commandString == "ledoff2") {
      command = LedOff2;
    } else if (commandString == "enable potentiometer") {
      command = EnablePotentiometer;
    } else if (commandString == "disable potentiometer") {
      command = DisablePotentiometer;
    } else if (commandString.startsWith("ledpower")) {
      command = LedPower;
      String valueString = commandString.substring(8);
      if (valueString.toInt() >= 0 && valueString.toInt() <= 255) {
        value = valueString.toInt();
      } else {
        Serial.println("Ogiltigt värde för ledpower. Ange ett heltal mellan 0 och 255.");
      }
    }
    processCommand(command, value);
  }

  if (potentiometerEnabled) {
    int potValue = analogRead(POTENTIOMETER);
    int pwmValue = map(potValue, 0, 1023, 0, 255);
    analogWrite(LED_BLUE, pwmValue);

    float current = (potValue * 5.0) / 1023.0 / 220.0; 
    float voltage = current * 220.0;

    Serial.print("ADC-värde: ");
    Serial.print(potValue);
    Serial.print(" | PWM-värde: ");
    Serial.print(pwmValue);
    Serial.print(" | Ström: ");
    Serial.print(current);
    Serial.print(" A | Spänning: ");
    Serial.println(voltage);
  }

  delay(300);
}
